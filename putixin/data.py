# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/001_data.ipynb (unless otherwise specified).

__all__ = ['cfg_fashion_mnist', 'PUTIXIN_HOME', 'default_data_path', 'default_model_path', 'data']

# Cell
# server
import os
#from pathlib import Path
import torch
import torchvision
#torchvision.__version__

from .config import CfgNode

# Cell
cfg_fashion_mnist = CfgNode()
cfg_fashion_mnist.DATASET = CfgNode()
cfg_fashion_mnist.DATASET.NAME = 'FashionMNIST'
cfg_fashion_mnist.DATASET.STATS = ((0.1307,), (0.3081,))

# Cell
PUTIXIN_HOME = os.path.expanduser(os.getenv('PUTIXIN_HOME', '~/.putixin'))
default_data_path = PUTIXIN_HOME + '/data'
default_model_path = PUTIXIN_HOME + '/models'

# Cell
def data(cfg:CfgNode, transforms:list=None, path:str=None, bs:int=16):
    '''
    Args:
    -- cfg: name and stats of dataset.
    -- path: data dir of dataset.
    -- bs: batch_size.

    Return:

    '''
    if transforms is None:
        to_tensor = torchvision.transforms.ToTensor()
        normalize = torchvision.transforms.Normalize(*cfg.DATASET.STATS)
        transforms = torchvision.transforms.Compose([to_tensor, normalize])


    if path is None:
        path = default_data_path

    dataset = getattr(torchvision.datasets, cfg.DATASET.NAME)

    train_data = dataset(path, download=True, transform=transforms)
    test_data = dataset(path, train=False, download=True, transform=transforms)

    train_loader = torch.utils.data.DataLoader(train_data,
                                batch_size=bs,
                                shuffle=True,
                                num_workers=0)
    test_loader = torch.utils.data.DataLoader(test_data,
                                batch_size=bs,
                                shuffle=True,
                                num_workers=0)

    return train_loader, test_loader